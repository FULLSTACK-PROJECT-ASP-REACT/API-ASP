// <auto-generated />
using System;
using ApiNetCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiNetCore.Entities
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiNetCore.Entities.Category", b =>
                {
                    b.Property<int>("IdCat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_cat");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCat"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NameCat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_cat");

                    b.Property<string>("StatusCat")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("A")
                        .HasColumnName("status_cat")
                        .IsFixedLength();

                    b.HasKey("IdCat")
                        .HasName("tbl_category_pk");

                    b.ToTable("tbl_category");
                });

            modelBuilder.Entity("ApiNetCore.Entities.CategoryProduct", b =>
                {
                    b.Property<int>("IdCaPr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_ca_pr");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCaPr"));

                    b.Property<int?>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("cat_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProId")
                        .HasColumnType("int")
                        .HasColumnName("pro_id");

                    b.HasKey("IdCaPr")
                        .HasName("tbl_category_product_pk");

                    b.HasIndex("CatId");

                    b.HasIndex("ProId");

                    b.ToTable("tbl_category_product");
                });

            modelBuilder.Entity("ApiNetCore.Entities.DetailTransaction", b =>
                {
                    b.Property<int>("IdDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_d_t");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDT"));

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("CodeStub")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("code_stub");

                    b.Property<string>("DescriptionTra")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description_tra");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price_unit");

                    b.Property<int?>("ProId")
                        .HasColumnType("int")
                        .HasColumnName("pro_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total");

                    b.Property<int?>("TraId")
                        .HasColumnType("int")
                        .HasColumnName("tra_id");

                    b.HasKey("IdDT")
                        .HasName("tbl_detail_tran_pk");

                    b.HasIndex("ProId");

                    b.HasIndex("TraId");

                    b.ToTable("tbl_detail_transaction");
                });

            modelBuilder.Entity("ApiNetCore.Entities.Product", b =>
                {
                    b.Property<int>("IdPro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPro"));

                    b.Property<string>("CodePro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("code_pro");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DescriptionPro")
                        .HasColumnType("text")
                        .HasColumnName("description_pro");

                    b.Property<string>("ImagePro")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("image_pro");

                    b.Property<string>("NamePro")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("name_pro");

                    b.Property<decimal>("PriceUnitPro")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price_unit_pro");

                    b.Property<string>("StatusPro")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("A")
                        .HasColumnName("status_pro")
                        .IsFixedLength();

                    b.Property<int>("StockPro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stock_pro")
                        .HasDefaultValueSql("('10000')");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdPro")
                        .HasName("tbl_product_pk");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdPro"), false);

                    b.HasIndex(new[] { "IdPro" }, "tbl_product_id_pro_index");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "IdPro" }, "tbl_product_id_pro_index"));

                    b.ToTable("tbl_product");
                });

            modelBuilder.Entity("ApiNetCore.Entities.Transaction", b =>
                {
                    b.Property<int>("IdTra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tra");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTra"));

                    b.Property<string>("CodeStub")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code_stub_tra");

                    b.Property<DateTime?>("EmissionDateTra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("emission_date_tra")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MessageTra")
                        .HasColumnType("text")
                        .HasColumnName("message_tra");

                    b.Property<int>("PriceUnitTra")
                        .HasColumnType("int")
                        .HasColumnName("price_unit_tra");

                    b.Property<string>("StatusTra")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValue("A")
                        .HasColumnName("status_tra")
                        .IsFixedLength();

                    b.Property<int>("TotalAmountTra")
                        .HasColumnType("int")
                        .HasColumnName("total_amount_tra");

                    b.Property<string>("TypeTra")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("type_tra")
                        .IsFixedLength();

                    b.HasKey("IdTra")
                        .HasName("tbl_transaction_pk");

                    b.ToTable("tbl_transaction");
                });

            modelBuilder.Entity("ApiNetCore.Entities.CategoryProduct", b =>
                {
                    b.HasOne("ApiNetCore.Entities.Category", "Cat")
                        .WithMany("TblCategoryProducts")
                        .HasForeignKey("CatId")
                        .HasConstraintName("tbl_category_product_tbl_category_id_cat_fk");

                    b.HasOne("ApiNetCore.Entities.Product", "Pro")
                        .WithMany("TblCategoryProducts")
                        .HasForeignKey("ProId")
                        .HasConstraintName("tbl_category_product_tbl_product_id_pro_fk");

                    b.Navigation("Cat");

                    b.Navigation("Pro");
                });

            modelBuilder.Entity("ApiNetCore.Entities.DetailTransaction", b =>
                {
                    b.HasOne("ApiNetCore.Entities.Product", "Pro")
                        .WithMany("TblDetailTransactions")
                        .HasForeignKey("ProId")
                        .HasConstraintName("tbl_detail_tran_tbl_product_id_pro_fk");

                    b.HasOne("ApiNetCore.Entities.Transaction", "Tra")
                        .WithMany("TblDetailTransactions")
                        .HasForeignKey("TraId")
                        .HasConstraintName("tbl_detail_tran_tbl_transaction_id_tra_fk");

                    b.Navigation("Pro");

                    b.Navigation("Tra");
                });

            modelBuilder.Entity("ApiNetCore.Entities.Category", b =>
                {
                    b.Navigation("TblCategoryProducts");
                });

            modelBuilder.Entity("ApiNetCore.Entities.Product", b =>
                {
                    b.Navigation("TblCategoryProducts");

                    b.Navigation("TblDetailTransactions");
                });

            modelBuilder.Entity("ApiNetCore.Entities.Transaction", b =>
                {
                    b.Navigation("TblDetailTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
